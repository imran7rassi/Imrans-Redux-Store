{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imran\\\\bootcamp\\\\Imrans-Redux-Store\\\\client\\\\src\\\\pages\\\\Detail.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport Cart from '../components/Cart';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif';\nimport { idbPromise } from \"../utils/helpers\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// importing hooks\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Detail() {\n  _s();\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const {\n    products,\n    cart\n  } = state;\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: {\n          ...currentProduct,\n          purchaseQuantity: 1\n        }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', {\n        ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', {\n      ...currentProduct\n    });\n  };\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentProduct ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-1\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"\\u2190 Back to Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentProduct.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), \"$\", currentProduct.price, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addToCart,\n          children: \"Add to Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !cart.find(p => p._id === currentProduct._id),\n          onClick: removeFromCart,\n          children: \"Remove from Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/images/${currentProduct.image}`,\n        alt: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }, this) : null, /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Detail, \"6FhqZ3DkYPG+LORsgM66hFgwgts=\", false, function () {\n  return [useSelector, useDispatch, useParams, useQuery];\n});\n_c = Detail;\n;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","useQuery","Cart","QUERY_PRODUCTS","spinner","idbPromise","useSelector","useDispatch","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","jsxDEV","_jsxDEV","Fragment","_Fragment","Detail","_s","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","removeFromCart","length","forEach","then","indexedProducts","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","name","description","price","onClick","disabled","p","src","image","alt","_c","$RefreshReg$"],"sources":["C:/Users/imran/bootcamp/Imrans-Redux-Store/client/src/pages/Detail.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport Cart from '../components/Cart';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport { idbPromise } from \"../utils/helpers\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// importing hooks\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\n\nfunction Detail() {\n  const state = useSelector(state => state);\n\n  const dispatch = useDispatch(); \n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n  \nconst addToCart = () => {\n  const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n    // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n    idbPromise('cart', 'put', {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n    // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n    idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n  }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ‚Üê Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}