{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products]\n      };\n\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n    // add item to cart \n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    // add more than 1 item to the cart \n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // remove the product that has an action \n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    // updating the product that has an action \n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n    // clear all products in the cart\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    // opposite of state \n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    // if it's none of these actions, do not update state at all and keep things the same!\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","arguments","length","undefined","action","type","product","newState","filter","_id","map","purchaseQuantity"],"sources":["C:/Users/imran/bootcamp/Imrans-Redux-Store/client/src/utils/reducers.js"],"sourcesContent":["import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n  \n  const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n        ...state,\n        categories: [...action.categories]\n      };\n\n      case UPDATE_CURRENT_CATEGORY:\n        return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n      // add item to cart \n      case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n      // add more than 1 item to the cart \n      case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n      // remove the product that has an action \n      case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n      // updating the product that has an action \n      case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n      // clear all products in the cart\n      case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n      // opposite of state \n      case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n      // if it's none of these actions, do not update state at all and keep things the same!\n      default:\n        return state;\n    }\n  };\n\nexport default reducer; "],"mappings":"AAAA,SACEA,eAAe,EACfC,iBAAiB,EACjBC,uBAAuB,EACvBC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,UAAU,EACVC,WAAW,QACN,WAAW;AAElB,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;AAEC,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC3C,QAAQC,MAAM,CAACC,IAAI;IACjB;IACA,KAAKrB,eAAe;MAClB,OAAO;QACL,GAAGgB,KAAK;QACRN,QAAQ,EAAE,CAAC,GAAGU,MAAM,CAACV,QAAQ;MAC/B,CAAC;;IAEH;IACA,KAAKT,iBAAiB;MACpB,OAAO;QACP,GAAGe,KAAK;QACRH,UAAU,EAAE,CAAC,GAAGO,MAAM,CAACP,UAAU;MACnC,CAAC;IAED,KAAKX,uBAAuB;MAC1B,OAAO;QACP,GAAGc,KAAK;QACRF,eAAe,EAAEM,MAAM,CAACN;MAC1B,CAAC;IACD;IACA,KAAKX,WAAW;MAChB,OAAO;QACL,GAAGa,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAES,MAAM,CAACE,OAAO;MACtC,CAAC;IACD;IACA,KAAKlB,oBAAoB;MACzB,OAAO;QACL,GAAGY,KAAK;QACRL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAE,GAAGS,MAAM,CAACV,QAAQ;MAC1C,CAAC;IACD;IACA,KAAKL,gBAAgB;MACrB,IAAIkB,QAAQ,GAAGP,KAAK,CAACL,IAAI,CAACa,MAAM,CAACF,OAAO,IAAI;QAC1C,OAAOA,OAAO,CAACG,GAAG,KAAKL,MAAM,CAACK,GAAG;MACnC,CAAC,CAAC;MAEF,OAAO;QACL,GAAGT,KAAK;QACRJ,QAAQ,EAAEW,QAAQ,CAACL,MAAM,GAAG,CAAC;QAC7BP,IAAI,EAAEY;MACR,CAAC;IACD;IACA,KAAKjB,oBAAoB;MACzB,OAAO;QACL,GAAGU,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAEK,KAAK,CAACL,IAAI,CAACe,GAAG,CAACJ,OAAO,IAAI;UAC9B,IAAIF,MAAM,CAACK,GAAG,KAAKH,OAAO,CAACG,GAAG,EAAE;YAC9BH,OAAO,CAACK,gBAAgB,GAAGP,MAAM,CAACO,gBAAgB;UACpD;UACA,OAAOL,OAAO;QAChB,CAAC;MACH,CAAC;IACD;IACA,KAAKf,UAAU;MACf,OAAO;QACL,GAAGS,KAAK;QACRJ,QAAQ,EAAE,KAAK;QACfD,IAAI,EAAE;MACR,CAAC;IACD;IACA,KAAKH,WAAW;MAChB,OAAO;QACL,GAAGQ,KAAK;QACRJ,QAAQ,EAAE,CAACI,KAAK,CAACJ;MACnB,CAAC;;IAED;IACA;MACE,OAAOI,KAAK;EAAC;AAEnB,CAAC;AAEH,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}